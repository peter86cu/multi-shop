package com.online.multishop.controller;import java.io.IOException;import java.util.ArrayList;import java.util.Arrays;import java.util.logging.Level;import java.util.logging.Logger;import javax.servlet.http.HttpServletResponse;import com.online.multishop.service.ParametrosService;import com.online.multishop.service.ShoppingUsuariosService;import com.online.multishop.service.ValidarPagoService;import com.online.multishop.modelo.ResponseResultado;import com.online.multishop.vo.*;import com.online.multishop.modelo.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.client.RestClientException;import org.springframework.web.client.RestTemplate;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.ObjectWriter;import com.google.gson.Gson;@RestControllerpublic class LoginController {	@Autowired	RestTemplate template;	@Autowired	ShoppingUsuariosService service;	@Autowired	ParametrosService servicePara;	@Autowired	ValidarPagoService servicePagos;	ObjectWriter ow = (new ObjectMapper()).writer().withDefaultPrettyPrinter();/** * * datos.append("cartIDSession", sessionStorage.getItem("cartIDSession")); *         datos.append("nameUser", sessionStorage.getItem("nameUser")); *         datos.append("userId", sessionStorage.getItem("userId")); * * */	@PostMapping(value = { "login" }, produces = { "application/json" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET, RequestMethod.POST })	@ResponseStatus(HttpStatus.CREATED)	public void login(@RequestParam("mail") String mail, @RequestParam("password") String pwd,					 Model modelo, HttpServletResponse responseHttp) throws IOException {		ResponseResultado response = new ResponseResultado();		Logger.getLogger(LoginController.class.getName()).log(Level.SEVERE, (String) mail+pwd, "Login");		if (InicioController.session.getToken() == null) {			response = service.obtenerToken(mail, pwd);			Logger.getLogger(LoginController.class.getName()).log(Level.SEVERE,  ow.writeValueAsString(response));			if (response.getCode()==200) {				InicioController.session.setToken(response.getResultado());				ResponseUsuario usuarioLogin = service.obtenerDatosUsuarioLogin(response.getResultado(), mail);				if (usuarioLogin.isStatus()) {					ResponseDirecciones direccion= service.recuperarDreccionUsuarioPorId(usuarioLogin.getUser().getId(),InicioController.session.getToken());					if(direccion.isStatus()) {						InicioController.session.setDirecciones(new ArrayList<DireccionUsuario>());						InicioController.session.setDirecciones(Arrays.asList(direccion.getDirecciones()) );					}					//busco los datos del carrito si tiene pendiente					ResponseCart lstResponseCart[] = servicePara.obtenerCarritoPorUsuario(usuarioLogin.getUser().getId());					if (lstResponseCart != null) {						for (ResponseCart responseCart : lstResponseCart) {							ShoppingHistoryEstado state = servicePara.obtenerEstadoCarrito(responseCart.getCart().getIdhistestado());							if (state != null) {								if (state.getIdestado() == 6) {									InicioController.session.responseResultado.setCarrito(responseCart);									InicioController.session.setCardId(responseCart.getCart().getIdcart());									break;								}							}						}					}					InicioController.session.setUser(usuarioLogin.getUser());					usuarioLogin.setResultado(InicioController.session.getToken());					String json = new Gson().toJson(usuarioLogin);					responseHttp.setContentType("application/json");					responseHttp.setCharacterEncoding("UTF-8");					responseHttp.getWriter().write(json);				} else {					usuarioLogin.setResultado("El recurso requerido no está disponible.");					String json = new Gson().toJson(usuarioLogin);					responseHttp.setContentType("application/json");					responseHttp.setCharacterEncoding("UTF-8");					responseHttp.getWriter().write(json);				}			} else {				//response.setResultado("El recurso requerido no está disponible.");				String json = new Gson().toJson(response);				responseHttp.setContentType("application/json");				responseHttp.setCharacterEncoding("UTF-8");				responseHttp.getWriter().write(json);			}		} else {			InicioController.session = new Session();			response.setCode(400);			//response.setResultado();			String json = new Gson().toJson(response);			responseHttp.setContentType("application/json");			responseHttp.setCharacterEncoding("UTF-8");			responseHttp.getWriter().write(json);		}		modelo.addAttribute("sessionId", InicioController.session.getSessionId());		modelo.addAttribute("carrito", InicioController.obtenerCarritoCompra());		modelo.addAttribute("user", InicioController.session.getUser());		modelo.addAttribute("tipoProducto",InicioController.session.getResponseResultado().getTipoProducto());		modelo.addAttribute("todaCategoria",InicioController.session.getResponseResultado().getTodasCategorias());		modelo.addAttribute("cardId", InicioController.session.getCardId());		modelo.addAttribute("cartObtenido",InicioController.session.responseResultado.getCarrito());		modelo.addAttribute("isLoguin", InicioController.session.isLogin());		modelo.addAttribute("carrito", InicioController.obtenerCarritoCompra());	}	@GetMapping({ "/logout" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET })	@ResponseStatus(HttpStatus.CREATED)	public void logout(HttpServletResponse responseHttp) throws RestClientException, IOException {		ResponseResultado response= new ResponseResultado();		if (InicioController.session.getToken() != null) {			String val= service.salir(template);			InicioController.session = new Session();			InicioController.session.responseResultado= new ResponseApi();			InicioController.carrito= new ResponseCarritoDetalle();			response.setCode(200);			String json = new Gson().toJson(response);			responseHttp.setContentType("application/json");			responseHttp.setCharacterEncoding("UTF-8");			responseHttp.getWriter().write(json);		}else {			response.setCode(201);			response.setResultado("");			String json = new Gson().toJson(response);			responseHttp.setContentType("application/json");			responseHttp.setCharacterEncoding("UTF-8");			responseHttp.getWriter().write(json);		}	}}