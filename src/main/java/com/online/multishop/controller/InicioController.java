package com.online.multishop.controller;import com.ayalait.modelo.*;import com.ayalait.response.*;import com.ayalait.utils.BusquedaReceptor;import com.fasterxml.jackson.databind.ObjectMapper;import com.google.gson.Gson;import com.multishop.modelo.Session;import com.multishop.modelo.*;import com.multishop.response.*;import com.online.multishop.service.ParametrosService;import com.online.multishop.service.ShoppingUsuariosService;import com.online.multishop.service.ValidarPagoService;import com.online.multishop.service.ValidarPagoServiceImpl;import com.online.multishop.utils.Utils;import com.online.multishop.vo.*;import java.io.FileNotFoundException;import java.io.IOException;import java.io.InputStream;import java.net.URL;import java.util.*;import java.util.logging.Level;import java.util.logging.Logger;import java.util.stream.IntStream;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.client.RestTemplate;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import javax.servlet.http.HttpServletResponse;@Controllerpublic class InicioController {	@Autowired	RestTemplate template;	@Autowired	ParametrosService service;	@Autowired	ValidarPagoService servicePagos;		@Autowired	ShoppingUsuariosService serviceUser;	//static ResponseApi responseResultado = new ResponseApi();	public static Session session = new Session();	static ResponseCarritoDetalle carrito = new ResponseCarritoDetalle();	static RequestAddCart requestCart = new RequestAddCart();	HttpHeaders headers = new HttpHeaders();	Gson gson = new Gson();	ResponseEntity<String> result;	public  static final String ruta = "GesVentas";	public  String ip="127.0.0.1";	public static String rutaDowloadProducto;	public static String rutaDowloadTitulos;	public static String rutaDowloadEmpleado;	public static final boolean desarrollo=false;	public InicioController() throws IOException {		parametros();	}	void parametros() throws IOException {		Properties p = new Properties();		try {			URL url = this.getClass().getClassLoader().getResource("application.properties");			if (url == null) {				throw new IllegalArgumentException("application.properties" + " No se pudo cargar el fichero properties");			} else {				InputStream propertiesStream = url.openStream();				p.load(propertiesStream);				propertiesStream.close();				this.rutaDowloadProducto = p.getProperty("server.uploaderProductos");				this.rutaDowloadTitulos = p.getProperty("server.uploaderTitulos");				this.rutaDowloadEmpleado = p.getProperty("server.uploaderEmpleado");			}		} catch (FileNotFoundException var3) {			Logger.getLogger(InicioController.class.getName()).log(Level.SEVERE, (String) null, var3);		}	}	static void  validarLogin() throws IOException {		if(session.getUser()!=null){			if (session.getUser().getId()!=null && !session.getUser().getId().equalsIgnoreCase("00000000")){				session.setLogin(true);				//session.setToken("");				ShoppingUsuariosPago sinLogin= new ShoppingUsuariosPago();			}else if(session.getUser().getId()!=null && session.getUser().getId().equalsIgnoreCase("00000000")){				session.setLogin(false);			}/*else {				ShoppingUsuariosPago sinLogin= new ShoppingUsuariosPago();				sinLogin.setName("Invitado");				session.setUser(sinLogin);				session.setLogin(false);			}*/		}else{			ShoppingUsuarios sinLogin= new ShoppingUsuarios();			sinLogin.setName("Invitado");			sinLogin.setId("0000000000");			session.setUser(sinLogin);			session.setLogin(false);			session.setSessionId(UUID.randomUUID().toString());			session.setCardId(UUID.randomUUID().toString());		}	}	 void cargarDatosTipoProducto() {		ResponseTipoProducto responseTP =service.listadoTipoProducto();		session.setResponseResultado(new ResponseApi());		session.getResponseResultado().setTipoProducto(new ArrayList<TipoProducto>());		session.getResponseResultado().setTipoProducto(responseTP.getTipoProductos() );	}	void cargarDatosMoneda() {		ResponseMonedas moneda = service.listarMonedas();		session.getResponseResultado().setMoneda(new ArrayList<Moneda>());		session.getResponseResultado().setMoneda(moneda.getMonedas());	}	 void cargarTodasCategorias() {		ResponseCategorias todas=service.listarCategorias();		session.getResponseResultado().setTodasCategorias(new ArrayList<Categoria>());		session.getResponseResultado().setTodasCategorias(todas.getCategorias());	}	 	 void cargarCategorias() {			ResponseCategorias todas=service.listarCategorias();			session.getResponseResultado().setCategorias(new ArrayList<Categoria>());			session.getResponseResultado().setCategorias(todas.getCategorias());		}	 void cargarDatosProductos() {		ResponseListaProductos response =  service.consultarListaProductos();		session.getResponseResultado().setProductos(new ArrayList<Producto>());		session.getResponseResultado().setProductos(response.getProductos());	}	 void cargarMarcasProducto(){		ResponseListaMarcasProducto responseMarca = service.listadoMarcasProducto();		session.getResponseResultado().setMarcaProducto(new ArrayList<>());		session.getResponseResultado().setMarcaProducto(responseMarca.getMarcas());	}	 void cargarModelosProductos(){		ResponseListaModeloProducto responseModelo =service.listadoModelosProducto();		session.getResponseResultado().setModeloProducto(new ArrayList<>());		session.getResponseResultado().setModeloProducto(responseModelo.getModelo());	}	 	 void cargarTipoDocumentos() {		 ResponseListaTipoDoc response = service.listadoTipoDocumento();		 session.getResponseResultado().setTipoDocumento(new ArrayList<TipoDocumento>());		 session.getResponseResultado().setTipoDocumento(response.getDocumento());	 }	 	 void cargarDptoPais() {		 ResponseListaDpto response= service.listadoDptoPais();		 session.getResponseResultado().setDepartamentos(new ArrayList<DptoPais>());		 session.getResponseResultado().setDepartamentos(response.getDpto());		 	 }	public static int obtenerCarritoCompra(){		int carrito=0;		if(session.getResponseResultado()!=null){			if(session.getResponseResultado().getCarrito()!=null){				if(session.getResponseResultado().getCarrito().getDetalle()!=null){					for (int  i = 0;  i < session.getResponseResultado().getCarrito().getDetalle().size();  i++) {						carrito += session.getResponseResultado().getCarrito().getDetalle().get(i).getCantidad();					}				}			}		}		return carrito;	}	@GetMapping({ "/" })	public String showForm(Model modelo) throws IOException {		this.headers.get("autenticacion");		validarLogin();		modelo.addAttribute("user", session.getUser());		modelo.addAttribute("isLoguin", session.isLogin());		modelo.addAttribute("carrito", obtenerCarritoCompra());		modelo.addAttribute("sessionId", session.getSessionId());		modelo.addAttribute("cardId", session.getCardId());		if (session.responseResultado!=null) {			if(session.getResponseResultado().getTipoProducto()==null) {				cargarDatosTipoProducto();			}if (session.getResponseResultado().getTodasCategorias()==null){				cargarTodasCategorias();			}		}		modelo.addAttribute("tipoProducto",session.getResponseResultado().getTipoProducto() );		modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());		return "index";	}		@PostMapping({ "/busqueda-global-products" })	public void buscarProductosGlobal(@ModelAttribute("product") String busqueda, Model modelo,HttpServletResponse responseHttp) throws IOException {		validarLogin(); 		if (session.responseResultado!=null) {			if(session.getResponseResultado().getTipoProducto()==null) {				cargarDatosTipoProducto();			}if (session.getResponseResultado().getTodasCategorias()==null){				cargarTodasCategorias();			}if (session.getResponseResultado().getMarcaProducto()==null) {				cargarMarcasProducto();			}if (session.getResponseResultado().getModeloProducto()==null) {				cargarModelosProductos();			}				cargarDatosProductos();					}		List<BusquedaReceptor> lstEncontradosProd= new ArrayList<BusquedaReceptor>();		for(Producto prod : session.getResponseResultado().getProductos()) {			BusquedaReceptor receptor = new BusquedaReceptor();			if(prod.getNombre().toUpperCase().contains(busqueda.toUpperCase())) {				receptor.setId(String.valueOf(prod.getCategoria()) );				receptor.setText(prod.getNombre());				lstEncontradosProd.add(receptor);			}					}		if(lstEncontradosProd.isEmpty()) {			for(ModeloProducto model : session.getResponseResultado().getModeloProducto()) {				if(model.getModelo().toUpperCase().contains(busqueda.toUpperCase())) {										List<Producto> encontrado=session.getResponseResultado().getProductos().stream().filter(e->e.getModelo()==model.getId_modelo()).toList();					if(!encontrado.isEmpty()) {						for(Producto prod : encontrado) {							BusquedaReceptor receptor = new BusquedaReceptor();								receptor.setId(String.valueOf(prod.getCategoria()) );								receptor.setText(prod.getNombre());								lstEncontradosProd.add(receptor);																			}											}									}			}			if(lstEncontradosProd.isEmpty()) {				for (MarcaProducto marca : session.getResponseResultado().getMarcaProducto()) {					if(marca.getMarca().toUpperCase().contains(busqueda.toUpperCase())) {						List<Producto> encontrado=session.getResponseResultado().getProductos().stream().filter(e->e.getMarca()==marca.getId_marca()).toList();						if(!encontrado.isEmpty()) {							for(Producto prod : encontrado) {								BusquedaReceptor receptor = new BusquedaReceptor();									receptor.setId(String.valueOf(prod.getCategoria()) );									receptor.setText(prod.getNombre());									lstEncontradosProd.add(receptor);																						}												}					}				}			}		}		if(lstEncontradosProd.isEmpty()) {			BusquedaReceptor receptor = new BusquedaReceptor();			receptor.setId("1");			receptor.setText("No encontrado");			lstEncontradosProd.add(receptor);		}						String json = (new Gson()).toJson(lstEncontradosProd);		responseHttp.setContentType("application/json");		responseHttp.setCharacterEncoding("UTF-8");		responseHttp.getWriter().write(json);				modelo.addAttribute("tipoProducto",session.getResponseResultado().getTipoProducto() );		modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());			}	@GetMapping({ "/index" })	public String indexS(Model modelo, RedirectAttributes attribute) throws IOException {		validarLogin();		modelo.addAttribute("user", session.getUser());		modelo.addAttribute("isLoguin", session.isLogin());		modelo.addAttribute("carrito", obtenerCarritoCompra());		modelo.addAttribute("sessionId", session.getSessionId());		modelo.addAttribute("cardId", session.getCardId());		if (session.responseResultado!=null) {			if(session.getResponseResultado().getTipoProducto()==null) {				cargarDatosTipoProducto();			}if (session.getResponseResultado().getTodasCategorias()==null){				cargarTodasCategorias();			}		}		modelo.addAttribute("tipoProducto",session.getResponseResultado().getTipoProducto() );		modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());		return "index";	}		@GetMapping({ "/crear-cuenta" })	public String registarUusario(Model modelo) throws IOException {		validarLogin();   				modelo.addAttribute("user", session.getUser());		    modelo.addAttribute("isLoguin", session.isLogin());			modelo.addAttribute("carrito", obtenerCarritoCompra());			modelo.addAttribute("sessionId", session.getSessionId());			modelo.addAttribute("cardId", session.getCardId());			if (session.responseResultado!=null) {				if(session.getResponseResultado().getTipoProducto()==null) {					cargarDatosTipoProducto();				}if (session.getResponseResultado().getTodasCategorias()==null){					cargarTodasCategorias();				}				if(session.getResponseResultado().getTipoDocumento()==null)					cargarTipoDocumentos();			}			modelo.addAttribute("tipoProducto",session.getResponseResultado().getTipoProducto() );			modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());			modelo.addAttribute("tipoDocumento",session.getResponseResultado().getTipoDocumento());			return "register";					}		@GetMapping({ "/my-acount" })	public String miCuenta(Model modelo) throws IOException {		validarLogin();			modelo.addAttribute("user", session.getUser());			modelo.addAttribute("isLoguin", session.isLogin());			modelo.addAttribute("carrito", obtenerCarritoCompra());			modelo.addAttribute("sessionId", session.getSessionId());			modelo.addAttribute("cardId", session.getCardId());			if (session.responseResultado!=null) {				if(session.getResponseResultado().getTipoProducto()==null) {					cargarDatosTipoProducto();				}if (session.getResponseResultado().getTodasCategorias()==null){					cargarTodasCategorias();				}				if(session.getResponseResultado().getTipoDocumento()==null)					cargarTipoDocumentos();			}			modelo.addAttribute("tipoProducto",session.getResponseResultado().getTipoProducto() );			modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());			modelo.addAttribute("tipoDocumento",session.getResponseResultado().getTipoDocumento());			return "my-acount";					}	/*	 * OBTIENE LAS CATEGORIAS DE UN TIPO DE PRODUCTO	 * 	 * */	@GetMapping({ "category" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET})	public String category(@RequestParam("id") int id,Model modelo, HttpServletResponse responseHttp) throws IOException {		validarLogin();		modelo.addAttribute("carrito", obtenerCarritoCompra());		modelo.addAttribute("sessionId", session.getSessionId());		modelo.addAttribute("user", session.getUser());		modelo.addAttribute("isLoguin", session.isLogin());		modelo.addAttribute("cardId", session.getCardId());		if(session.getResponseResultado()!=null) {						if(session.getResponseResultado().getTipoProducto()==null)				cargarDatosTipoProducto();						if (session.getResponseResultado().getTodasCategorias()==null){				cargarTodasCategorias();			}								}			ResponseApi response = session.getResponseResultado();			String sinCategoria = "No se encontraron datos";			List<Categoria> lstCat = new ArrayList<Categoria>();			Categoria[] categ = new Categoria[0];			//CARGO TODAS LAS CATEGORIAS			cargarCategorias();			if (!session.getResponseResultado().getCategorias().isEmpty()) {				String nomb = response.getTipoProducto().stream()						.filter(e -> e.getId_tipo_producto() == id).findFirst().get().getDescripcion().toString();				lstCat = session.getResponseResultado().getCategorias().stream().filter(e -> e.getId_tipo_producto() == id)						.toList();				if (!lstCat.isEmpty()) {					response.setCode(200);					response.setCategorias(lstCat);					response.setResultado(nomb.toUpperCase());				} else {					response.setCategorias(new ArrayList<Categoria>());					response.setResultado(sinCategoria);				}			} else {				response.setCategorias(new ArrayList<Categoria>());				response.setResultado(sinCategoria);			}			session.setResponseResultado(response);				modelo.addAttribute("categorias",session.responseResultado.getCategorias());		modelo.addAttribute("resultado",session.responseResultado.getResultado() );		modelo.addAttribute("sessionId", session.getSessionId());		modelo.addAttribute("tipoProducto", session.responseResultado.getTipoProducto());		modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());		return "category";	}	/*	 * OBTIENE LA LISTA DE PRODUCTO DADO UNA CATEGORIA	 * 	 * */	@GetMapping({ "products" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET })	public String productos(@RequestParam("id") int id,Model modelo, HttpServletResponse responseHttp) throws IOException {		validarLogin();		modelo.addAttribute("carrito", obtenerCarritoCompra());		modelo.addAttribute("sessionId", session.getSessionId());		modelo.addAttribute("user", session.getUser());		modelo.addAttribute("isLoguin", session.isLogin());		modelo.addAttribute("cardId", session.getCardId());		if (session.getResponseResultado()!=null){			if(session.getResponseResultado().getTipoProducto() == null) {				cargarDatosTipoProducto();			} else {				//CARGO MONEDAS				if(session.getResponseResultado()!=null){					if(session.getResponseResultado().getMoneda()==null)						cargarDatosMoneda();				}				//CARGO TODAS LAS CATERIAS				if(session.responseResultado.getTodasCategorias().isEmpty())					cargarTodasCategorias();				//Cargo los productos				if (session.responseResultado!=null) {					if(session.responseResultado.getProductos()==null)					cargarDatosProductos();					List<Producto> lst = session.responseResultado.getProductos().stream().filter(e -> e.getCategoria() == id)							.toList();					if (!lst.isEmpty()) {						session.responseResultado.setProductos(lst);					}				}			}		}else{			session.setResponseResultado(new ResponseApi());			cargarDatosTipoProducto();			cargarTodasCategorias();			cargarDatosProductos();			cargarDatosMoneda();		}		modelo.addAttribute("mmaammaa",Arrays.asList( session.getResponseResultado().getMoneda()));		modelo.addAttribute("productos",session.getResponseResultado().getProductos());		modelo.addAttribute("tipoProducto",session.getResponseResultado().getTipoProducto());		modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());		return "shop";	}	@GetMapping({ "detail" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET })	public String detailProd(@RequestParam("id") String id,Model modelo, HttpServletResponse responseHttp) throws IOException {		validarLogin();		modelo.addAttribute("carrito", obtenerCarritoCompra());		modelo.addAttribute("sessionId", session.getSessionId());		modelo.addAttribute("user", session.getUser());		modelo.addAttribute("isLoguin", session.isLogin());		modelo.addAttribute("cardId", session.getCardId());		if (session.getResponseResultado()!=null){			if(session.getResponseResultado().getTipoProducto() == null) {				cargarDatosTipoProducto();			} else {				//CARGO MONEDAS				if(session.getResponseResultado()!=null){					if(session.getResponseResultado().getMoneda()==null)						cargarDatosMoneda();					//CARGO TODAS LAS CATERIAS					if(session.responseResultado.getTodasCategorias()==null || session.responseResultado.getTodasCategorias().isEmpty())						cargarTodasCategorias();										if(session.responseResultado.getProductos()==null)					cargarDatosProductos();				}								ResponseImagenesProducto lstImag = service.imagenesProducto(id);				if (lstImag.isStatus()) {					for (int i = 0; i < lstImag.getImagenProducto().size(); i++) {						Utils.descargarImagenProducto(lstImag.getImagenProducto().get(i));					}					session.getResponseResultado().setImagenes( lstImag.getImagenProducto());				} else {					ProductoImagenes img[] = new ProductoImagenes[1];					ProductoImagenes nuevo = new ProductoImagenes();					nuevo.setIdproducto(id);					nuevo.setNombre("producto_sin_imagen.png");					img[0] = nuevo;					session.getResponseResultado().setImagenes(Arrays.asList(img));				}				ResponseDetalleProducto detalle = service.detalleProducto(id);				ResultadoDetalleProducto detail = new ResultadoDetalleProducto();				if (detalle.isStatus()) {					detail.setCaracteristica(detalle.getDetalle().getDescripcion());					detail.setResena("");					@SuppressWarnings("unchecked")					HashMap<String, String> jsonMap = new ObjectMapper().readValue(String.valueOf(detalle.getDetalle().getMap()) ,							HashMap.class);					detail.setMapa(jsonMap);				}				session.getResponseResultado().setDetalle(new ResultadoDetalleProducto());				session.getResponseResultado().setDetalle(detail);			}		}		List<Producto> producto = new ArrayList<Producto>();		if (!session.getResponseResultado().getProductos().isEmpty()) {			producto =session.getResponseResultado().getProductos().stream().filter(e -> e.getId().equalsIgnoreCase(id))					.toList();			if (!producto.isEmpty()) {				session.getResponseResultado().setProductos(producto);			} else {				session.getResponseResultado().setProductos(new ArrayList<>());			}		}		if (session.getResponseResultado()!=null) {			if(session.getResponseResultado().getMarcaProducto()==null){				cargarMarcasProducto();			}		}		List<MarcaProducto> lst= new ArrayList<>();		if (session.getResponseResultado().getMarcaProducto()!=null) {			final int cod = producto.get(0).getCategoria();			lst = session.getResponseResultado().getMarcaProducto().stream().filter(e -> e.getId_categoria() == cod).toList();			if (!lst.isEmpty()) {				session.getResponseResultado().setMarcaProducto(new ArrayList<>());				session.getResponseResultado().setMarcaProducto(lst);			} else {				session.getResponseResultado().setMarcaProducto(new ArrayList<>());			}		} else {			//session.getResponseResultado().setMarcaProducto(new ArrayList<>());			cargarMarcasProducto();		}		ResponseListaModeloProducto responseModelo = new ResponseListaModeloProducto();		if (session.responseResultado!=null) {			if(session.getResponseResultado().getModeloProducto()==null){				cargarModelosProductos();			}else{				List<ModeloProducto> lstMarca = new ArrayList<ModeloProducto>();				if (!lst.isEmpty()) {					int m = lst.get(0).getId_marca();					lstMarca =session.responseResultado.getModeloProducto().stream().filter(e -> e.getId_marca() == m)							.toList();				}				if (!lstMarca.isEmpty()) {					session.getResponseResultado().setModeloProducto(new ArrayList<ModeloProducto>());					session.getResponseResultado().setModeloProducto(lstMarca);				}			}		} else {			session.getResponseResultado().setModeloProducto(new ArrayList<>());		}		modelo.addAttribute("imagen", session.getResponseResultado().getImagenes());		modelo.addAttribute("productos",session.getResponseResultado().getProductos());		modelo.addAttribute("tipoProducto",session.getResponseResultado().getTipoProducto());		modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());		return "detail";	}	@GetMapping({ "search" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET, RequestMethod.POST })	@ResponseStatus(HttpStatus.CREATED)	public String buscarItemCarrito(@RequestParam("idCart") String idCart, @RequestParam("idUsuario") String idUsuario,						 	  Model modelo,HttpServletResponse responseHttp) throws IOException {		ShoppingCart cart = new ShoppingCart();		ResponseCarritoDetalle carObtenido = new ResponseCarritoDetalle();		List<ShoppingCartDetail> detail = new ArrayList<ShoppingCartDetail>();		List<ShoppingCartDetailTemp> detailTemp = new ArrayList<ShoppingCartDetailTemp>();		double totalAPagar = 0;		ResponseCart response000 = new ResponseCart();		validarLogin();		ResponseCart responseCarrito = new ResponseCart();		if (!idUsuario.equalsIgnoreCase("0000000000")) {			responseCarrito = service.obtenerCarrito(idCart, idUsuario);			if (responseCarrito != null) {				carObtenido.setCode(200);				carObtenido.setDatosCart(responseCarrito);			} else {				carObtenido.setCode(400);				carObtenido.setResultado("Error buscando la lista de productos del carrito.");				carObtenido.setDatosCart(responseCarrito);			}		}else if (idUsuario.equalsIgnoreCase("0000000000")) {			if (carrito.getDatosCart() != null) {				if (!carrito.getDatosCart().getCartDetalle().getCart().getIdcart().equalsIgnoreCase(idCart)) {					carrito = new ResponseCarritoDetalle();					CarritoDetalle cac= new CarritoDetalle();					cac.setCart(carrito.getDatosCart().getCartDetalle().getCart());					cac.setDetalle(carrito.getDatosCart().getCartDetalle().getDetalle());					response000.setCartDetalle(cac);					carObtenido.setDatosCart(response000);					carObtenido.setCode(300);				} else {					CarritoDetalle cac= new CarritoDetalle();					cac.setCart(carrito.getDatosCart().getCartDetalle().getCart());					cac.setDetalle(carrito.getDatosCart().getCartDetalle().getDetalle());					response000.setCartDetalle(cac);					carObtenido.setCode(200);					carObtenido.setDatosCart(response000);				}			} else {				carObtenido.setResultado("Carrito caducado. Intente de nuevo.");				carObtenido.setCode(300);			}		}		if(session.getResponseResultado()!=null){			if(session.getResponseResultado().getMoneda()==null)				cargarDatosMoneda();			if(session.getResponseResultado().getTipoProducto()==null)				cargarDatosTipoProducto();			if(session.responseResultado.getTodasCategorias().isEmpty())				cargarTodasCategorias();		}		modelo.addAttribute("sessionId", session.getSessionId());		modelo.addAttribute("carrito", obtenerCarritoCompra());		modelo.addAttribute("user", session.getUser());		modelo.addAttribute("isLoguin", session.isLogin());		modelo.addAttribute("tipoProducto",session.getResponseResultado().getTipoProducto());		modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());		modelo.addAttribute("cardId", session.getCardId());		modelo.addAttribute("cartObtenido",carObtenido.getDatosCart().getCartDetalle());		modelo.addAttribute("monedas",session.responseResultado.getMoneda());		return "cart";	}	@PostMapping({ "add-item-cart" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET, RequestMethod.POST })	@ResponseStatus(HttpStatus.CREATED)	public void showFormT(@RequestParam("idCart") String idCart, @RequestParam("idUsuario") String idUsuario,						  @RequestParam("idProducto") String idProducto, @RequestParam("precio") double precio,						  @RequestParam("cantidad") int cantidad, @RequestParam("accion") String accion,						  @RequestParam("img") String img, @RequestParam("producto") String productoName,						  Model modelo,HttpServletResponse responseHttp) throws IOException {		ShoppingCart cart = new ShoppingCart();		ResponseCarritoDetalle carObtenido = new ResponseCarritoDetalle();		List<ShoppingCartDetail> detail = new ArrayList<ShoppingCartDetail>();		List<ShoppingCartDetailTemp> detailTemp = new ArrayList<ShoppingCartDetailTemp>();		double totalAPagar = 0;		ResponseCart response000 = new ResponseCart();		validarLogin();		ResponseCart responseCarrito = new ResponseCart();		if (accion.equalsIgnoreCase("buscar") && !idUsuario.equalsIgnoreCase("0000000000")) {			responseCarrito = service.obtenerCarrito(idCart, idUsuario);			if (responseCarrito != null) {				carObtenido.setCode(200);				carObtenido.setDatosCart(responseCarrito);			} else {				carObtenido.setCode(400);				carObtenido.setResultado("Error buscando la lista de productos del carrito.");				carObtenido.setDatosCart(responseCarrito);			}		} else if (accion.equalsIgnoreCase("buscar") && idUsuario.equalsIgnoreCase("0000000000")) {			if (carrito.getDatosCart() != null) {				if (!carrito.getDatosCart().getCartDetalle().getCart().getIdcart().equalsIgnoreCase(idCart)) {					carrito = new ResponseCarritoDetalle();										response000.setCartDetalle(carrito.getDatosCart().getCartDetalle());					carObtenido.setDatosCart(response000);					carObtenido.setCode(300);				} else {					response000.setCartDetalle(carrito.getDatosCart().getCartDetalle());					carObtenido.setCode(200);					carObtenido.setDatosCart(response000);				}			} else {				carObtenido.setResultado("Carrito caducado. Intente de nuevo.");				carObtenido.setCode(300);			}		} else if (accion.equalsIgnoreCase("insertar") || accion.equalsIgnoreCase("login")) {			//Valido que el usuario no tenga agregado carrito en pendiente, si es asi lo traigo y actualizo con los nuevos datos.			if(accion.equalsIgnoreCase("login") || !idUsuario.equalsIgnoreCase("0000000000")) {				ResponseCartUsuario cartBD= service.obtenerCarritoPorUsuario(idUsuario);				if(cartBD.isStatus()) {					for (int i = 0; i < cartBD.getCartDetalle().size(); i++) {						/*ResponseHistoryEstadoCart state = service								.obtenerEstadoCarrito(cartBD.getCartDetalle().get(i).getCart().getIdhistestado());*/						//if (state.isStatus()) {							if (cartBD.getCartDetalle().get(i).getCart().getIdhistestado() == 6) {								ResponseCart datosCart = new ResponseCart();								cart= cartBD.getCartDetalle().get(i).getCart();								detailTemp= cartBD.getCartDetalle().get(i).getDetalle();								CarritoDetalle carr= new CarritoDetalle();								carr.setCart(cart);								carr.setDetalle(detailTemp);								datosCart.setCartDetalle(carr);								carrito= new ResponseCarritoDetalle();								carrito.setDatosCart(datosCart);								session.getResponseResultado().setCarrito(carr);								break;							}						//}					}				}			}			ShoppingCartDetailTemp nuevoT = new ShoppingCartDetailTemp();			ShoppingCartDetail nuevo = new ShoppingCartDetail();			ShoppingCartDetailTemp prod01 = new ShoppingCartDetailTemp();			int index = 0;     			if (carrito.getDatosCart() != null) {				if (!carrito.getDatosCart().getCartDetalle().getDetalle().isEmpty()) {					detail = new ArrayList<ShoppingCartDetail>();					detailTemp = carrito.getDatosCart().getCartDetalle().getDetalle();					for (ShoppingCartDetailTemp d : carrito.getDatosCart().getCartDetalle().getDetalle()) {						ShoppingCartDetail add = new ShoppingCartDetail();						add.setCantidad(d.getCantidad());						add.setId(d.getId());						add.setIdcart(d.getIdcart());						add.setIdproducto(d.getIdproducto());						add.setPrecio(d.getPrecio());						totalAPagar += d.getPrecio() * d.getCantidad();						detail.add(add);					}					if (!accion.equalsIgnoreCase("login")) {						if (carrito.getDatosCart().getCartDetalle().getDetalle().stream()								.anyMatch(e -> e.getIdproducto().equalsIgnoreCase(idProducto))) {							prod01 = carrito.getDatosCart().getCartDetalle().getDetalle().stream()									.filter(e -> e.getIdproducto().equalsIgnoreCase(idProducto)).findFirst().get();							final List<ShoppingCartDetailTemp> lstTemp = detailTemp;							index = IntStream.range(0, lstTemp.size())									.filter(i -> Objects.equals(lstTemp.get(i),											carrito.getDatosCart().getCartDetalle().getDetalle().stream()													.filter(e -> e.getIdproducto().equalsIgnoreCase(idProducto))													.findFirst().get()))									.findFirst().orElse(-1);						}					}				}			}			if (prod01.getIdcart() != null) {				totalAPagar = (prod01.getCantidad()+cantidad) * precio;				cart.setTotalapagar(totalAPagar);				prod01.setCantidad(prod01.getCantidad() + cantidad);				detailTemp.set(index, prod01);				detail.get(index).setCantidad(prod01.getCantidad());			    			} else if (!accion.equalsIgnoreCase("login")) {				// PARA AGREGAR				nuevo.setCantidad(cantidad);				nuevoT.setCantidad(nuevo.getCantidad());				nuevo.setCantidad(cantidad);				nuevo.setId(Utils.generarId());				nuevo.setIdcart(idCart);				nuevo.setIdproducto(idProducto);								nuevo.setPrecio(precio);				detail.add(nuevo);				// PARA MANTENER				nuevoT.setCantidad(nuevo.getCantidad());				nuevoT.setId(nuevo.getId());				nuevoT.setIdcart(nuevo.getIdcart());				nuevoT.setIdproducto(nuevo.getIdproducto());				nuevoT.setNombre(productoName);				nuevoT.setImagen(img);				nuevoT.setPrecio(precio);								cart.setIdhistestado(6);				if(session.getResponseResultado().getCarrito()!=null){					totalAPagar = session.getResponseResultado().getCarrito().getCart().getTotalapagar()+ (cantidad * precio);				}else{					totalAPagar =  (cantidad * precio);				}				detailTemp.add(nuevoT);			}			if(session.getResponseResultado().getCarrito()!=null){				cart=session.getResponseResultado().getCarrito().getCart();				cart.setTotalapagar(totalAPagar);				cart.setIdusuario(idUsuario);			}else{								cart.setTotalapagar(totalAPagar);				cart.setIdcart(idCart);				cart.setIdusuario(idUsuario);				cart.setFechacompra(Utils.obtenerFechaPorFormato("yyyy-MM-dd HH:mm:ss"));			}			CarritoDetalle cd= new CarritoDetalle();			cd.setCart(cart);			cd.setDetalle(detailTemp);			response000.setCartDetalle(cd);						carObtenido.setDatosCart(response000);			carObtenido.setCode(200);            			carrito.setDatosCart(response000);			session.getResponseResultado().setCarrito(cd);			requestCart.setCart(cart);			requestCart.setDetalle(detail);			if (idUsuario.equalsIgnoreCase("0000000000")) {				// Dejo en memoria			} else if (accion.equalsIgnoreCase("login") || accion.equalsIgnoreCase("insertar")) {				// GUARDO EN LA BASE				if (carrito.getDatosCart() != null) {					ResponseResultado response = service.guardarCarrito(requestCart);					if (response.isStatus()) {						ResponseCart responseCarritoIns = service.obtenerCarrito(idCart, idUsuario);						if (responseCarritoIns != null) {							carObtenido.setCode(200);							carObtenido.setDatosCart(responseCarritoIns);							carrito.setDatosCart(carObtenido.getDatosCart());							session.getResponseResultado().setCarrito(responseCarritoIns.getCartDetalle());						} else {							carObtenido.setCode(400);							carObtenido.setResultado("Error buscando la lista de productos del carrito.");							carObtenido.setDatosCart(responseCarritoIns);						}					}				}			}		}		if (session.responseResultado.getMoneda() == null) {			cargarDatosMoneda();		}		if (session.responseResultado.getTipoProducto() == null) {			cargarDatosTipoProducto();		}		ResponseApi response = new ResponseApi();		String json = "";		ResponseCategorias responseCat = new ResponseCategorias();		if (session.getResponseResultado().getTodasCategorias()==null){			cargarTodasCategorias();		}		modelo.addAttribute("sessionId", session.getSessionId());		modelo.addAttribute("carrito", obtenerCarritoCompra());		modelo.addAttribute("user", session.getUser());		modelo.addAttribute("isLoguin", session.isLogin());		modelo.addAttribute("tipoProducto",session.getResponseResultado().getTipoProducto());		modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());		modelo.addAttribute("cardId", session.getCardId());		json = new Gson().toJson(carObtenido);		responseHttp.setContentType("application/json");		responseHttp.setCharacterEncoding("UTF-8");		responseHttp.getWriter().write(json);	}	@GetMapping(value = { "checkout01" }, produces = { "application/json" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET})	@ResponseStatus(HttpStatus.CREATED)	public String chequearPago(@RequestParam("userId") String idUsuario,@RequestParam("curenty") String curenty,							 @RequestParam("pay") int pay,Model modelo,HttpServletResponse responseHttp)			throws IOException {		validarLogin();		if (session.responseResultado!= null) {			if(session.responseResultado.getTipoProducto()==null)				cargarDatosTipoProducto();			if(session.responseResultado.getTodasCategorias()==null)				cargarTodasCategorias();			if(session.responseResultado.getDepartamentos()==null)				cargarDptoPais();		}		 		if (session.responseResultado.getCarrito() == null) {			ResponseCartUsuario lstResponseCart = service.obtenerCarritoPorUsuario(idUsuario);			if (lstResponseCart.isStatus()) {				for (CarritoDetalle responseCart : lstResponseCart.getCartDetalle()) {					ResponseHistoryEstadoCart state = service							.obtenerEstadoCarrito(responseCart.getCart().getIdhistestado());					if (state.isStatus()) {						if (state.getEstado().getIdestado() == 6) {							session.responseResultado.setCarrito(responseCart);							break;						}					}				}			}		}		modelo.addAttribute("sessionId", session.getSessionId());		modelo.addAttribute("carrito", obtenerCarritoCompra());		modelo.addAttribute("user", session.getUser());		modelo.addAttribute("isLoguin", session.isLogin());		modelo.addAttribute("tipoProducto",session.getResponseResultado().getTipoProducto());		modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());		modelo.addAttribute("cardId", session.getCardId());		modelo.addAttribute("cartObtenido",session.responseResultado.getCarrito());		modelo.addAttribute("monedas",session.responseResultado.getMoneda());		modelo.addAttribute("totalPagar",pay);		modelo.addAttribute("monedaPago",curenty);		modelo.addAttribute("direcciones",session.getDirecciones());		modelo.addAttribute("departamento",session.getResponseResultado().getDepartamentos());		return "checkout01";	}		@PostMapping(value = { "add-new-address" })	@CrossOrigin(origins = "*", methods = {  RequestMethod.POST })	@ResponseStatus(HttpStatus.CREATED)	public void addAddress(Model modelo,@RequestParam("userId") String idUsuario, @RequestParam("alias") String alias,			@RequestParam("departamento") String dpto,@RequestParam("ciudad") String ciudad,			@RequestParam("direccion") String direccion,@RequestParam("codigo") String codigo,  HttpServletResponse responseHttp)			throws IOException {				 						validarLogin();			if (session.responseResultado!= null) {				if(session.responseResultado.getTipoProducto()==null)					cargarDatosTipoProducto();				if(session.responseResultado.getTodasCategorias()==null)					cargarTodasCategorias();				if(session.responseResultado.getDepartamentos()==null)					cargarDptoPais();			}						DireccionUsuario dir= new DireccionUsuario();			dir.setAlias(alias);			dir.setCity(ciudad);			dir.setFull_address(direccion);			dir.setIdaddress(0);			dir.setIdusuario(idUsuario);			dir.setState(dpto);			dir.setZip_code(codigo);						ResponseResultado response= serviceUser.guardarDireccionUsuario(dir, session.getToken());						if(response.isStatus()) {				ResponseDirecciones direcc= serviceUser.recuperarDreccionUsuarioPorId(session.getUser().getId(),InicioController.session.getToken());				if(direcc.isStatus()) {					InicioController.session.setDirecciones(new ArrayList<DireccionUsuario>());					InicioController.session.setDirecciones(direcc.getDirecciones() );				}				String json = new Gson().toJson(response);				responseHttp.setContentType("application/json");				responseHttp.setCharacterEncoding("UTF-8");				responseHttp.getWriter().write(json);			}else {				String json = new Gson().toJson(response);				responseHttp.setContentType("application/json");				responseHttp.setCharacterEncoding("UTF-8");				responseHttp.getWriter().write(json);			}						 					 			}	@PostMapping(value = { "validar-pago" })	@CrossOrigin(origins = "*", methods = {  RequestMethod.POST })	@ResponseStatus(HttpStatus.CREATED)	public void pagar(@RequestParam("userId") String idUsuario, @RequestParam("moneda") String moneda,@RequestParam("idDireccion") int idDireccion,					  @RequestParam("total") int total,@RequestParam("iva") int iva, @RequestParam("cartId") String cartId, HttpServletResponse responseHttp)			throws IOException {		OrdenPago orden = new OrdenPago();		ResponseApi response = new ResponseApi();		String json = "";		try {			RequestValidarPago request = new RequestValidarPago();			request.setAmount(total);			request.setCurrency(moneda);			request.setCountry("UY");			// OBTENGO NUMERO DE ORDEN			request.setOrder_id(Utils.rellenarConCeros(String.valueOf(servicePagos.obtenerNumeroOrden()), 5));			ShoppingUsuariosPago player = new ShoppingUsuariosPago();			DireccionUsuarioPago address = new DireccionUsuarioPago();			//Obtener Direccion de envio			DireccionUsuario direccion= session.getDirecciones().stream()					.filter(e -> e.getIdaddress()==idDireccion).findFirst().get();			address.setCity(direccion.getCity());			address.setState(direccion.getState());			address.setFull_address(direccion.getFull_address());			address.setZip_code(direccion.getZip_code());			player.setDocument(session.getUser().getDocument());			player.setDocument_type("CI");			player.setId(session.getUser().getId());			player.setEmail(session.getUser().getEmail());			player.setName(session.getUser().getName());			player.setPhone(session.getUser().getPhone());			player.setUser_reference(UUID.randomUUID().toString());			player.setAddress(address);			request.setPlayer(player);			request.setNotification_url(ValidarPagoServiceImpl.notificationURL);			request.setSuccess_url(ValidarPagoServiceImpl.success_pago_url + idUsuario);			ResponseValidarPago respuestaPago = servicePagos.validarPagoOrden(request);			Logger.getLogger(InicioController.class.getName()).log(Level.INFO, "response (validar-pago)",					respuestaPago.getClass());			if (respuestaPago.isStatus()) {				orden.setFecha_pago(respuestaPago.getPagoValido().getCreated_date());				orden.setIdcart(cartId);				orden.setIddireccion(idDireccion);				orden.setIdpago(respuestaPago.getPagoValido().getId());				orden.setIdusuario(session.getUser().getId());				orden.setMonto(total);				orden.setIva(iva);				orden.setMonedapago(moneda);				orden.setOrder_id(request.getOrder_id());				orden.setRedirect_url(respuestaPago.getPagoValido().getRedirect_url());				orden.setState(respuestaPago.getPagoValido().getStatus());				response.setCartIDSession(UUID.randomUUID().toString());				carrito = new ResponseCarritoDetalle();				ResponseResultado crearOrden = servicePagos.crearOrdenPago(orden);				Logger.getLogger(InicioController.class.getName()).log(Level.INFO, "request (crear-orden-pago)",						crearOrden);				if (crearOrden.isStatus()) {					response.setPagoValidado(respuestaPago.getPagoValido());					response.setCode(200);					session.getResponseResultado().setCarrito(null);					session.getResponseResultado().setCartIDSession("");					session.setCardId("");				}			}else {				response.setCode(respuestaPago.getCode());				response.setStatus(respuestaPago.isStatus());				response.setError(respuestaPago.getError());				response.setResultado(respuestaPago.getRespuesta());			}			if (session.responseResultado != null) {				if (session.responseResultado.getTipoProducto() == null) {					cargarDatosTipoProducto();					if (session.responseResultado.getTodasCategorias() == null)						cargarTodasCategorias();				}			}				json = new Gson().toJson(response);				responseHttp.setContentType("application/json");				responseHttp.setCharacterEncoding("UTF-8");				responseHttp.getWriter().write(json);				session.responseResultado.setCarrito(null);			} catch(Exception e){				response.setCode(500);				response.setResultado(e.getMessage());				json = new Gson().toJson(response);				responseHttp.setContentType("application/json");				responseHttp.setCharacterEncoding("UTF-8");				responseHttp.getWriter().write(json);			}	}	@GetMapping(value = { "shopping" }, produces = { "application/json" })	@CrossOrigin(origins = "*", methods = { RequestMethod.GET })	public String comprasPorUsuario(@RequestParam("iduser") String idusuario,Model modelo,HttpServletResponse responseHttp) throws IOException {		ResponseOrdenPago responseResult = servicePagos.obtenerOrdenPagoPorUsuarios(idusuario);		validarLogin();				if (responseResult.isStatus()) {			List<OrdenesPagoUsuarios> ordenUser= new ArrayList<OrdenesPagoUsuarios>();			for (OrdenPago orden : responseResult.getLstOrdenPago()) {				/*ResponseCart cart= service.obtenerCarrito(orden.getIdcart(),orden.getIdusuario());				int cantidad=0;				String fechaCreado="";				if(cart.isStatus()){					if(cart.getCartDetalle().getDetalle()!=null){						for(ShoppingCartDetailTemp detail: cart.getCartDetalle().getDetalle()){							cantidad += detail.getCantidad();						}					}					if(cart.getCartDetalle()!=null){						fechaCreado= cart.getCartDetalle().getCart().getFechacompra();						//fechaCreado= Utils.obtenerFechaPorFormato("yyyy-MM-dd HH:mm:ss");					}				}*/				OrdenesPagoUsuarios pago= new OrdenesPagoUsuarios();				pago.setIdorden(orden.getOrder_id());				pago.setIdpago(orden.getIdpago());				pago.setFecha_pago(orden.getFecha_pago());				//pago.setFecha_creado(fechaCreado);				pago.setIdusuario(idusuario);				pago.setMontopagado(orden.getMonto());				pago.setIva(orden.getIva());				pago.setState(orden.getState());				pago.setUrlpago(orden.getRedirect_url());				//pago.setCantidad(cantidad);				pago.setMonedapago(orden.getMonedapago());				ordenUser.add(pago);							}			session.getResponseResultado().setComprasUsuarios(ordenUser);						session.responseResultado.getComprasUsuarios().sort(					Comparator.comparing(OrdenesPagoUsuarios::getFecha_pago)							.thenComparing(OrdenesPagoUsuarios::getIdorden)							.reversed()			);		}		if (session.responseResultado!= null) {			if (session.responseResultado.getTipoProducto()== null)				cargarDatosTipoProducto();			if (session.responseResultado.getTodasCategorias()== null)				cargarTodasCategorias();		}				modelo.addAttribute("sessionId", session.getSessionId());		modelo.addAttribute("carrito", obtenerCarritoCompra());		modelo.addAttribute("user", session.getUser());		modelo.addAttribute("isLoguin", session.isLogin());		modelo.addAttribute("tipoProducto",session.getResponseResultado().getTipoProducto());		modelo.addAttribute("todaCategoria",session.getResponseResultado().getTodasCategorias());		modelo.addAttribute("cardId", session.getCardId());		modelo.addAttribute("cartObtenido",session.responseResultado.getCarrito());		modelo.addAttribute("monedas",session.responseResultado.getMoneda());		modelo.addAttribute("comprasUsuarios",session.responseResultado.getComprasUsuarios());		String json = "";		// Thread.sleep(500);		return "shopping";		/*if (!idusuario.equalsIgnoreCase("0000000000")) {			if (session.responseResultado.getCarrito() != null) {			}			if (session.responseResultado.getCarrito() != null) {				ShoppingHistoryEstado state = service.obtenerEstadoCarrito(session.responseResultado.getCarrito().getCart().getIdhistestado());				if (state != null) {					if (state.getIdestado() == 6) {						response.setCarrito(InicioController.responseResultado.getCarrito());					}				}			} else {				ResponseCart lstResponseCart[] = servicePara.obtenerCarritoPorUsuario(idusuario);				if (lstResponseCart != null) {					for (ResponseCart responseCart : lstResponseCart) {						ShoppingHistoryEstado state = servicePara								.obtenerEstadoCarrito(responseCart.getCart().getIdhistestado());						if (state != null) {							if (state.getIdestado() == 6) {								response.setCarrito(InicioController.responseResultado.getCarrito());								InicioController.responseResultado.setCarrito(responseCart);								break;							}						}					}				}				if (InicioController.responseResultado.getCarrito() == null) {					response.setCarrito(new ResponseCart());				}			}		} else if (InicioController.responseResultado.getCarrito() != null) {			response.setCarrito(InicioController.responseResultado.getCarrito());		} else {			response.setCarrito(new ResponseCart());		}		json = new Gson().toJson(response);		responseHttp.setContentType("application/json");		responseHttp.setCharacterEncoding("UTF-8");		responseHttp.getWriter().write(json);*/	}	@GetMapping({ "/template" })	public String showForm2(Model modelo, RedirectAttributes attribute) {		return "template";	}	@GetMapping({ "/maintenance" })	public String maintenance(Model modelo, RedirectAttributes attribute) {		return "maintenance";	}		@GetMapping({ "/confirmation" })	public String confirmation(@RequestParam("token") String token,Model modelo, RedirectAttributes attribute) {		ResponseResultado responseResult= serviceUser.confirmarToken(token);				if(responseResult.isStatus()) {			ResponseUsuarioShopping user= serviceUser.buscarUserPorToken(token);			if(user.isStatus()) {				modelo.addAttribute("nombreUser","Bienvenido ".concat(" ").concat(user.getUser().getName()));				modelo.addAttribute("mensaje", responseResult.getResultado());			}		}						return "confirmation";	}}